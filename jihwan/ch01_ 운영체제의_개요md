# 01. 운영체제의 개요

### 일상생활 속의 운영체제

- OS(`Operating System`)라고 부르는 운영체제는 일반 컴퓨터나 노트북의 전원을 켜면 가장 먼저 만나는 소프웨어이다.
	- 스마트폰 운영체제 : 안드로이드, IOS
	- 개인용 컴퓨터 : 윈도우, MAC OS
	- 대형 컴퓨터 : 유닉스(`Unix`), 리눅스(`Linux`)

### 운영체제의 필요성
- 컴퓨터는 운영체제가 없어도 애니악을 통해서 프로그래밍이 가능하다.
- 운영체제가 있고 없고의 차이는 기능의 추가와 성능 변경 가능 여부가 쉽다.
- 자원 관리에 유용하다.
- 사용자가 직접 자원에 접근하는 것을 막고 자원을 보호하고 관리한다.
- 사용자가 컴퓨터를 사용할 수 있도록 해주고, 인터페이스를 통해서 결과를 알려 준다.

### 운영체제의 정의
- 운영체제란?
	-  사용자에게 편리한 인터페이스 환경을 제공하고 컴퓨터 시스템의 자원을 효율적으로 관리하는 소프트웨어이다.

### 운영체제의 역할
- 자원관리
- 자원보호
- 하드웨어 인터페이스 제공
- 사용자 인터페이스 제공

### 운영체제의 목표
- 효율성
- 안정성
- 확장성
- 편리성

# 02. 운영체제의 역사

### 초창기 컴퓨터
- 최초 컴퓨터는 에니악이다.
- 에니악은 7시간 걸릴 계산을 3초에 끝낼 수 있는 성능을 가지고 있다.
- 백열전구와 유사한 진공관 소자를 사용하여 켜지면 1, 꺼지면 0을 판단해서 컴퓨터가 2진법을 사용하게 되는 계기가 되었다.
- 전선을 연결하여 논리회로를 구성하는 것을 하드와이어링(`hard wiring`)방식을 사용한다.
	- 1)  하드와이어링은 전선으로 논리회로를 구성하여 원하는 결과만 얻는 방식으로 다른 계산이나 수식을 사용하여 전선을 다시 연결한다.
- 운영체제는 없었다.

### 일괄 작업 시스템
- 이 당시 컴퓨너는 중앙처리장치 CPU와 메인 메모리가 있으나 키보드, 모니터 같은 출력장치는 없다.
- 천공카드 리더를 입력장치로, 라인 프린터를 출력장치로 사용한다.
- 천공카드 시스템은 프로그램을 구성한 후 카드에 구명을 뚫어 컴퓨터에 임력하면 프로그램이 실행되는 구조로서 프로그램의 실행 결과가 라인 프린터를 통해 출력된다.
- 하드와이어링 시스템은 다른 작업을 하려면 전선을 일일 다시 연결해야 하지만 천공카드 리더는 프로그램을 바꾸면 다른 작업이 가능했다.
- 이 당시 프로그래밍 환경은 작업을 한꺼번에 처리해야 하고 프로그램 실행 중간에 사용자가 데이터를 입력, 수정이 불가능하다.
- 일괄 작업 시스템 혹은 일괄 처리 시스템이라고 부른다.
- 일괄 작업 시스템 메인 메모리에 운영체제의 상주 영역과 사용자의 사용 영역으로 나눠진다.

### 대화형 시스템
- 키보드와 모니터는 비효율적인 천공카드 리더 방식의 일괄 작업 시스템에 변화를 주었다.
- 키보드와 모니터가 개발됨으로써 사용자가 입력과 출력을 화면으로 볼 수 있다.
- 컴퓨터와 사용자의 대화를 통해 작업이 이루어지므로 대화형 시스템라고 부른다.
- 일괄 작업 시스템은 입출력이 거의 없어 작업 시간을 예측할 수 있지만 대화형 시스템의 경우 작업 시간을 예측 할 수 없다.

### 시분할 시스템 (=현대 프로세스 개념)
- 하나의 CPU로 여러 작업을 동시에 실행되는 기술을 다중 프로그래밍이라고 한다.
- 다중 프로그램이 시스템은 여러 작업을 하나의 CPU를 여러 작업이 동시에 실행되는 것처럼 보이게 한다.
- 다중 프로그램밍 시스템에서는 CPU 사용 시간을 잘게 쪼개서 여러 작업을 나누어준다.
- 여러 작업을 조금씩 처리하여 작업이 동시에 이뤄지도록 보이게 하는 방식을 시분할 시스템(`time sharing system`)이라고 한다.
- 다중 작업(`multitasking`)시스템은 CPU 사용 시간을 잘게 쪼개어 작업들에 나누어주면서 모든 작업이 동시에 처리 되는 것처럼 보이게 한다.
- 시간을 잘게 쪼개는 것을 타임 슬라이스(`time slice`) 혹은 타임 퀀텀(`time quantum`)이라고 부른다.
- 시분할 시스템은 하나의 컴퓨터에서 여러 명의 작업할 수 있는 다중 사용자 시스템(`multi-user-system`)을 가능하게 한다.

### 분산 시스템
- 개인용 컴퓨터와 인터넷이 보급 된 후 작은 컴퓨터들이 하나로 묶어 대형 컴퓨터에 버금가는 시스템을 구축했다.
- 분산 시스템은 네트워크상에 분산되어 있는 여러 컴퓨터로 작업을 처리하고 그 결과를 상호 교환하도록 구성한 시스템이다.

### 클라이언트/서버 시스템
- 클라이언트/서버 시스템은 모든 컴퓨터의 지위가 동일한 분산 시스템과 달리 작업을 요청하는 클라이언트와 거기에 응답하여 요청받은 작업을 처리하는 서버의 이중 구조로 나뉜다.
- 클라이언트/서버 구조는 웹 시스템(`web system`)이다.
- 클라이언트/서버 구조의 문제점은 서버 과부화이다. 모든 요청이 서버로 집중되기 때문에 수십만 명의 클라이언트를 처리하기 위해서 많은 서버와 큰 용량의 네트워크가 필요하다.

### P2P 시스템
- 기존 클라이언트/서버 시스템 과부화 문제를 해경하기 위해서 P2P(`Peer-to-Peer System`) 시스템이 만들어졌다.
	- peer는 말단 노드, 사용자의 컴퓨터를 가리키며, P2P는 서버를 거치지 않고 사용자와 사용자를 직접 연결한다는 의미이다.
- P2P 시스템은 서버가 파일 검색만 하고, 사용자 간에 파일 전송이 이루어지기 때문에 서버 과부하가 적다.
- P2P 시스템의 업적
	1. 메신저
		- 수만 명이 동시에 채팅을 하고 파일을 주고 받는 메신저 시스템은 P2P 기술을 이용하면 서버의 부하 없이 구현할 수 있다.
	2. 파일 공유
		- 시스템에서 같은 파일을 여러 사람으로부터 데이터를 나누어 받습니다.
		- 파일을 나누어 받아 하나의 파일을 완성합니다
		- 10명에게 데이터를 받는다면 1명에게 데이터를 받을 때보다 속도가 10배 빠릅니다.
		- 중간에 1~2명이 프로그램을 중단해도 다른 사람에게서 받을 수 있습니다.

### 기타 컴퓨팅 환경
1. 그리드 컴퓨팅
	- 필요한 컴퓨팅 자원을 구매하여 사용하는 컴퓨터 환경을 그리드 컴퓨팅(`Grid Computing`)이라고 한다.
	- 서로 다른 기종의 컴퓨터들을 묶어 대용량의 컴퓨터 풀을 구성하고 원격지와 연결한다.
	- 대용량 데이터의 연산을 소규모 연산으로 나누어 여러 대의 컴퓨터로 분산시킨다.
	- 웹 하드 서비스가 그리드 시스템을 사용한다.
	- 서버에 엄청난 양의 데이터를 보관하고 있는 웹 하드는 사용자에게 데이터를 전송할 때 과부화가 걸리기도 하여 이를 해결하기 위해 대용량 데이터 P2P 시스템 기술을 사용한다.
	- 그리드 컴퓨팅이 하드웨어적인 컴큐팅 환경에 통합이면 SasS(`Software as a Service`)는 사용자가 필요할 때 소프트웨어 기능을 이용하고 그만큼만 비용을 지불하는 개념이다.
2. 클라우드 컴퓨팅
	 - 클라우드 컴퓨팅(`cloud computing`)은 언제 어디서나 응용 프로그램과 데이터를 자유롭게 사용할 수 있는 컴퓨팅 환경으로 그리드 컴퓨팅과 SasS를 합쳐놓은 형태이다.

### 사물 인터넷
- 사물 인터넷(`Internet of Things, IoT`)은 사물에 센서와 통신 기능을 내장하여 인터넷에 연결하는 기술이다.
- 인터넷으로 연결된 사물들이 데이터를 주고 받아 스스로 분석하고, 학습한 정보를 사용자에게 제공하거나 새로운 서비스를 창출하는 사물 인터넷은 인공지능, 로봇 공학, 무인 운송 수단 등 4차 산업혁명을 이끄는 기술이다.

# 03 운영체제의 구조
### 커널과 인터페이스
- 커널은 프로세스 관리, 메모리 관리, 저장장치 관리 등 운영체제의 핵심적인 기능을 모아놓은 것이다.
- 운영체제에 인터페이스는 커널에 사용자의 명령을 전달하고 실행 결과를 사용자에게 알려주는 역활을 한다.

운영체제의 큰 두 부분이 있다.
1. 사용자와 응용 프로그램에 인접한 인터페이스
2. 운영체제의 핵심 기능을 모아놓은 커널

### 시스템 호출과 디바이스 드라이버
커널 내부에 **시스템 호출**과 **드라이버**가 있다.
### 시스템 호출
- 시스템 호출(`system call`)은 커널이 자신을 보호하기 위해 만든 인터페이스이다.
- 커널은 사용자 응용 프로그램으로부터 컴퓨터 자원을 보호하기 위해 자원에 직접 접근하는 것을 차단한다.
	- **직접 접근**
		- 두 응용 프로그램이 자기 마음대로 저장하고 수정할 수 있다.
	- **시스템 호출을 통한 접근**
		- 응용 프로그램이 직접 하드디스크에 저장을 하지 않고 커널이 제공하는 기능으로 데이터를 저장해달라고 요청을 할 수 있다.
- 시스템 호출에 관한 내용
	- 시스템 호출은 커널이 제공하는 시스템 자원의 사용과 연관된 함수이다.
	- 응용 프로그램이 하드웨어 자원에 접근하거나 운영체제가 제공하는 서비스를 이용하려 할 때는 시스템 호출을 사용해야 한다.
### 드라이버
- 응용 프로그램과 커널의 인터페이스가 시스템 호출이라면 커널과 하드웨어의 인터페이스는 드라이버가 담당한다.
- 하드웨어 제작사가 만든 소프트웨어를 디바이스 드라이버라고 한다.

### 커널의 구성
- 운영체제의 핵심 기능을 모아놓은 커널이 주로 하는 일은 프로세스, 메모리 관리, 파일 시스템 관리, 입출력 고나리, 프로세스간 통신 관리 등이 있다.
- 커널의 기능은 단일형 구조 커널, 계층형 구조 커널, 마이크로 구조 커널로 구분된다.

1. 단일형 구조 커널
- 단일형 구조 커널(`monolithic architecture`)커널은 초창기의 운영체제 구조로 커널의 핵심 기능을 구현하는 모듈이 구분 없이 하나로 구성되어 있다.

2. 계층형 구조 커널
- 계층형 구조(`layered architecture`)커널은 단일형 구조 커널이 발전된 형태로, 비슷한 기능을 가진 모듈을 묶어서 하나의 계층으로 만들고 계층 간의 통신을 통해 운영체제를 구현하는 방식이다.

3. 마이크로 구조 커널
- 마이크로 구조 커널의 운영체제는 프로세스 관리, 메모리 관리, 프로세스 간 통신 관리 등 가장 기본적인 기능만 제공한다.
- 커널은 메모리 관리와 프로세스 간의 동기화 서비스를 제공하며, 메모리 관리자와 동기화 모듈은 프로세스 간 통신 모듈로 연결되어 있다.
